#!/bin/bash
# Proxmox Backup Telegram Notifier
# ========================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø  
# ========================
PROXMOX_API_URL="https://your-proxmox-server:8006/api2/json"        # API Proxmox
PROXMOX_API_TOKEN="PVEAPIToken=user@pam!tokenid=your-secret"        # API Taken Proxmox
PROXMOX_NODE=""                                                     # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –ø—É—Å—Ç–æ, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - claster)
TELEGRAM_BOT_TOKEN="your-bot-token"                                 # Telegram Bot Token
TELEGRAM_CHAT_ID="your-chat-id"                                     # Telegram Chat ID
TELEGRAM_THREAD_ID=""                                               # Telegram THREAD (–µ—Å–ª–∏ –ø—É—Å—Ç–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≥–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞)
CHECK_INTERVAL=15                                                   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
MAX_TASK_AGE=7200                                                   # –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç running –∑–∞–¥–∞—á (2 —á–∞—Å–∞)
SENT_TASKS_FILE="/tmp/proxmox_backup_sent_tasks.txt"
SENT_ERRORS_FILE="/tmp/proxmox_backup_sent_errors.txt"
TRACKING_TASKS_FILE="/tmp/proxmox_backup_tracking_tasks.txt"
LOG_FILE="/var/log/proxmox-telegram-notifier.log"
RECENT_TASK_THRESHOLD=3600                                          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞

# –ù–ê–°–¢–†–û–ô–ö–ò DEBUG –ò –û–ß–ò–°–¢–ö–ò
DEBUG_ENABLED=false         # true/false –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π
CLEANUP_ENABLED=true        # –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
CLEANUP_DAYS=7             # –£–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
CLEANUP_INTERVAL_HOURS=24  # –ó–∞–ø—É—Å–∫–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤

# –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –û –•–†–ê–ù–ò–õ–ò–©–ï (–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –í –û–¢–ß–ï–¢–´)
STORAGE_WARNING_ENABLED=true    # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –æ—Ç—á–µ—Ç–∞—Ö
STORAGE_WARNING_THRESHOLD=90    # –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90%)
STORAGE_CRITICAL_THRESHOLD=95   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

# ========================
# –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò
# ========================
log_message() {
    local message="$1"
    local is_debug="${2:-false}"
    local timestamp=$(date '+%d.%m.%Y %H:%M:%S')

    # –ï—Å–ª–∏ —ç—Ç–æ DEBUG —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ DEBUG
    if [ "$is_debug" = "true" ] && [ "$DEBUG_ENABLED" != "true" ]; then
        return
    fi

    echo "[$timestamp] $message" >> "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è DEBUG —Å–æ–æ–±—â–µ–Ω–∏–π
log_debug() {
    local message="$1"
    log_message "DEBUG: $message" "true"
}

format_time() {
    local timestamp="$1"
    if [ -n "$timestamp" ] && [ "$timestamp" != "Unknown" ] && [ "$timestamp" != "Running" ]; then
        date -d "$timestamp" '+%d.%m.%Y %H:%M:%S' 2>/dev/null || echo "$timestamp"
    else
        echo "$timestamp"
    fi
}

# ========================
# –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò
# ========================
cleanup_old_entries() {
    local file_path="$1"
    local days="$2"

    if [ ! -f "$file_path" ]; then
        return
    fi

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    local temp_file=$(mktemp)
    local cutoff_date=$(date -d "-${days} days" '+%s')

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ UPID (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            local task_timestamp=$(echo "$line" | grep -oP 'UPID:[^:]*:[^:]*:\K[^:]*' | head -1)
            if [ -n "$task_timestamp" ] && [ "$task_timestamp" -gt "$cutoff_date" ]; then
                echo "$line" >> "$temp_file"
            elif [ -z "$task_timestamp" ]; then
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å timestamp, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                echo "$line" >> "$temp_file"
            fi
        fi
    done < "$file_path"

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    mv "$temp_file" "$file_path"
    log_message "–û—á–∏—â–µ–Ω —Ñ–∞–π–ª $file_path: —É–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ $days –¥–Ω–µ–π"
}

rotate_log_file() {
    local max_size_mb="$1"

    if [ ! -f "$LOG_FILE" ]; then
        return
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
    local file_size=$(du -m "$LOG_FILE" | cut -f1)

    if [ "$file_size" -gt "$max_size_mb" ]; then
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é
        local archive_name="${LOG_FILE}.$(date '+%Y%m%d_%H%M%S')"
        mv "$LOG_FILE" "$archive_name"

        # –°–∂–∏–º–∞–µ–º –∞—Ä—Ö–∏–≤
        gzip "$archive_name"

        log_message "–õ–æ–≥-—Ñ–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω: —Å–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤ ${archive_name}.gz"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        find "$(dirname "$LOG_FILE")" -name "$(basename "$LOG_FILE").*.gz" -mtime +30 -delete 2>/dev/null || true
    fi
}

perform_cleanup() {
    if [ "$CLEANUP_ENABLED" != "true" ]; then
        return
    fi

    log_message "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤..."

    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ—à–∏–±–æ–∫
    cleanup_old_entries "$SENT_TASKS_FILE" "$CLEANUP_DAYS"
    cleanup_old_entries "$SENT_ERRORS_FILE" "$CLEANUP_DAYS"

    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª
    if [ -f "$TRACKING_TASKS_FILE" ]; then
        rm -f "$TRACKING_TASKS_FILE"
        log_message "–£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª: $TRACKING_TASKS_FILE"
    fi

    # –†–æ—Ç–∏—Ä—É–µ–º –ª–æ–≥-—Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 50 –ú–ë
    rotate_log_file 50

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    find /tmp -name "tmp.*" -mtime +1 -delete 2>/dev/null || true

    log_message "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

check_cleanup_needed() {
    local cleanup_marker="/tmp/proxmox_notifier_last_cleanup"
    local current_time=$(date +%s)
    local cleanup_interval_seconds=$((CLEANUP_INTERVAL_HOURS * 3600))

    if [ -f "$cleanup_marker" ]; then
        local last_cleanup=$(cat "$cleanup_marker")
        local time_since_cleanup=$((current_time - last_cleanup))

        if [ "$time_since_cleanup" -gt "$cleanup_interval_seconds" ]; then
            perform_cleanup
            echo "$current_time" > "$cleanup_marker"
        fi
    else
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        echo "$current_time" > "$cleanup_marker"
        perform_cleanup
    fi
}

# ========================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –•–†–ê–ù–ò–õ–ò–©–ê –î–õ–Ø –û–¢–ß–ï–¢–û–í
# ========================
get_detailed_storage_info() {
    local storage_name="$1"
    local node_name="$2"

    local storage_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/storage/${storage_name}/status" 2>/dev/null)

    if [ -n "$storage_response" ] && echo "$storage_response" | jq -e '.data' >/dev/null 2>&1; then
        local total=$(echo "$storage_response" | jq -r '.data.total // 0' 2>/dev/null)
        local used=$(echo "$storage_response" | jq -r '.data.used // 0' 2>/dev/null)
        local avail=$(echo "$storage_response" | jq -r '.data.avail // 0' 2>/dev/null)

        if [ "$total" -gt 0 ]; then
            local used_percent=$((used * 100 / total))
            local used_gb=$((used / 1024 / 1024 / 1024))
            local avail_gb=$((avail / 1024 / 1024 / 1024))
            local total_gb=$((total / 1024 / 1024 / 1024))

            echo "$used_percent|$used_gb|$avail_gb|$total_gb"
        else
            echo "0|0|0|0"
        fi
    else
        echo "0|0|0|0"
    fi
}

check_storage_for_report() {
    local storage_name="$1"
    local node_name="$2"

    if [ "$STORAGE_WARNING_ENABLED" != "true" ]; then
        echo ""
        return
    fi

    log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ $storage_name –Ω–∞ —É–∑–ª–µ $node_name –¥–ª—è –æ—Ç—á–µ—Ç–∞"

    local storage_info=$(get_detailed_storage_info "$storage_name" "$node_name")
    IFS='|' read -r used_percent used_gb avail_gb total_gb <<< "$storage_info"

    log_debug "–•—Ä–∞–Ω–∏–ª–∏—â–µ $storage_name: $used_percent% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"

    if [ "$used_percent" -ge "$STORAGE_WARNING_THRESHOLD" ]; then
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        local warning_level="WARNING"
        local warning_icon="‚ö†Ô∏è"
        local warning_text="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"

        if [ "$used_percent" -ge "$STORAGE_CRITICAL_THRESHOLD" ]; then
            warning_level="CRITICAL"
            warning_icon="üö®"
            warning_text="–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –°—Ä–æ—á–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ"
        fi

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
        local warning_section="
$warning_icon <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –•–†–ê–ù–ò–õ–ò–©–ï</b>
      ‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ <code>$storage_name</code> –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ <b>$used_percent%</b>
      ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: ${avail_gb} –ì–ë –∏–∑ ${total_gb} –ì–ë
      ‚Ä¢ $warning_text"

        log_message "–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ $storage_name –≤ –æ—Ç—á–µ—Ç: $used_percent%"
        echo "$warning_section"
    else
        echo ""
    fi
}

# ========================
# TELEGRAM –ò API –§–£–ù–ö–¶–ò–ò
# ========================
send_telegram_message() {
    local message="$1"
    local disable_notification="${2:-false}"
    log_message "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"

    message=$(echo "$message" | sed 's/&/\&amp;/g')

    local json_data="{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"${message}\", \"parse_mode\": \"HTML\", \"disable_notification\": ${disable_notification}"
    if [ -n "$TELEGRAM_THREAD_ID" ] && [ "$TELEGRAM_THREAD_ID" != "" ]; then
        json_data="${json_data}, \"message_thread_id\": ${TELEGRAM_THREAD_ID}"
    fi
    json_data="${json_data}}"

    local response=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -H "Content-Type: application/json" \
        -d "$json_data" 2>/dev/null)
    if echo "$response" | grep -q '"ok":true'; then
        log_message "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        return 0
    else
        log_message "–û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏: $response"

        # –§–∞–ª–ª–±–µ–∫ –±–µ–∑ thread_id
        if [ -n "$TELEGRAM_THREAD_ID" ]; then
            local json_fallback="{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"${message}\", \"parse_mode\": \"HTML\", \"disable_notification\": ${disable_notification}}"
            local response_fallback=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -H "Content-Type: application/json" \
                -d "$json_fallback" 2>/dev/null)
            if echo "$response_fallback" | grep -q '"ok":true'; then
                log_message "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
                return 0
            fi
        fi
        return 1
    fi
}

get_cluster_info() {
    local cluster_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/cluster/status" 2>/dev/null)
    if [ -n "$cluster_response" ]; then
        echo "$cluster_response" | jq -r '.data[] | select(.type=="cluster") | .name' 2>/dev/null || echo "Unknown"
    else
        echo "Unknown"
    fi
}

get_node_info() {
    local node_name="$1"
    local node_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/status" 2>/dev/null)
    if [ -n "$node_response" ]; then
        local cpu_usage=$(echo "$node_response" | jq -r '.data.cpu // 0' 2>/dev/null)
        local memory_usage=$(echo "$node_response" | jq -r '.data.memory.used // 0' 2>/dev/null)
        local memory_total=$(echo "$node_response" | jq -r '.data.memory.total // 1' 2>/dev/null)

        local cpu_percent=$((${cpu_usage%.*} * 100))
        local mem_percent=$((memory_usage * 100 / memory_total))

        echo "CPU: ${cpu_percent}%, RAM: ${mem_percent}%"
    else
        echo "Status: Unknown"
    fi
}

get_simple_storage_info() {
    local storage_name="$1"
    local node_name="$2"

    local storage_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/storage/${storage_name}/status" 2>/dev/null)

    if [ -n "$storage_response" ] && echo "$storage_response" | jq -e '.data' >/dev/null 2>&1; then
        local total=$(echo "$storage_response" | jq -r '.data.total // 0' 2>/dev/null)
        local used=$(echo "$storage_response" | jq -r '.data.used // 0' 2>/dev/null)
        local avail=$(echo "$storage_response" | jq -r '.data.avail // 0' 2>/dev/null)

        if [ "$total" -gt 0 ]; then
            local used_percent=$((used * 100 / total))
            local avail_gb=$((avail / 1024 / 1024 / 1024))
            echo "${avail_gb}|${used_percent}"
        else
            echo "0|0"
        fi
    else
        echo "0|0"
    fi
}

get_monitoring_mode() {
    if [ -n "$PROXMOX_NODE" ] && [ "$PROXMOX_NODE" != "" ]; then
        echo "node"
    else
        echo "cluster"
    fi
}

get_tasks_url() {
    local mode=$(get_monitoring_mode)
    if [ "$mode" = "node" ]; then
        echo "${PROXMOX_API_URL}/nodes/${PROXMOX_NODE}/tasks"
    else
        echo "${PROXMOX_API_URL}/cluster/tasks"
    fi
}

check_api_connection() {
    local response=$(curl -s -k \
        -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/version" 2>/dev/null)
    if echo "$response" | grep -q '"data"' && echo "$response" | grep -q '"version"'; then
        return 0
    else
        return 1
    fi
}

# ========================
# –§–£–ù–ö–¶–ò–ò –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô
# ========================
task_already_sent() {
    local task_id="$1"
    touch "$SENT_TASKS_FILE"
    grep -Fxq "$task_id" "$SENT_TASKS_FILE" 2>/dev/null
}

mark_task_as_sent() {
    local task_id="$1"
    touch "$SENT_TASKS_FILE"
    if ! grep -Fxq "$task_id" "$SENT_TASKS_FILE" 2>/dev/null; then
        echo "$task_id" >> "$SENT_TASKS_FILE"
        sync
    fi
}

error_already_sent() {
    local error_id="$1"
    touch "$SENT_ERRORS_FILE"
    grep -Fxq "$error_id" "$SENT_ERRORS_FILE" 2>/dev/null
}

mark_error_as_sent() {
    local error_id="$1"
    touch "$SENT_ERRORS_FILE"
    if ! grep -Fxq "$error_id" "$SENT_ERRORS_FILE" 2>/dev/null; then
        echo "$error_id" >> "$SENT_ERRORS_FILE"
        sync
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏
is_task_recent() {
    local task_endtime="$1"
    local task_status="$2"

    # –ï—Å–ª–∏ —ç—Ç–æ NULL endtime, –∑–Ω–∞—á–∏—Ç –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if [ -z "$task_endtime" ] || [ "$task_endtime" = "null" ]; then
        log_debug "ENDTIME –ø—É—Å—Ç–æ–π –∏–ª–∏ null - –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        return 1
    fi

    local current_time=$(date +%s)
    local task_age=$((current_time - task_endtime))

    # –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 3 —Ä–∞–∑–∞)
    local threshold="$RECENT_TASK_THRESHOLD"
    if [ "$task_status" = "job errors" ] || [ "$task_status" = "ERROR" ] || echo "$task_status" | grep -qi "error\|fail\|interrupt"; then
        threshold=$((RECENT_TASK_THRESHOLD * 3))
        log_debug "–ü—Ä–∏–º–µ–Ω—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: $threshold —Å–µ–∫—É–Ω–¥ ($(($threshold / 3600)) —á–∞—Å–æ–≤)"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    local task_date=$(date -d "@$task_endtime" '+%d.%m.%Y %H:%M:%S' 2>/dev/null || echo "Unknown")
    local current_date=$(date '+%d.%m.%Y %H:%M:%S')

    log_debug "=== –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–û–°–¢–ò –ó–ê–î–ê–ù–ò–Ø ==="
    log_debug "–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å: $task_date (timestamp: $task_endtime)"
    log_debug "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $current_date (timestamp: $current_time)"
    log_debug "–í–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞–Ω–∏—è: $task_age —Å–µ–∫—É–Ω–¥ ($(($task_age / 3600)) —á–∞—Å–æ–≤ $(($task_age % 3600 / 60)) –º–∏–Ω—É—Ç)"
    log_debug "–ü–æ—Ä–æ–≥ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '$task_status': $threshold —Å–µ–∫—É–Ω–¥ ($(($threshold / 3600)) —á–∞—Å–æ–≤)"

    if [ "$task_age" -le "$threshold" ]; then
        log_debug "‚úÖ –ó–ê–î–ê–ù–ò–ï –ù–ï–î–ê–í–ù–ï–ï - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
        return 0
    else
        log_debug "‚ùå –ó–ê–î–ê–ù–ò–ï –°–¢–ê–†–û–ï - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–æ–∑—Ä–∞—Å—Ç –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ $(($task_age - $threshold)) —Å–µ–∫—É–Ω–¥)"
        return 1
    fi
}

# ========================
# –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê –õ–û–ì–û–í –ò VM DETECTION
# ========================
extract_vm_ids_from_log() {
    local log_content="$1"
    local vm_list=""

    # –ò—â–µ–º –≤—Å–µ VM ID –≤ –ª–æ–≥–µ
    while IFS= read -r line; do
        if echo "$line" | grep -q "Starting Backup of VM"; then
            local vm_id=$(echo "$line" | grep -oP "Starting Backup of VM \K\d+" | head -1)
            if [ -n "$vm_id" ]; then
                if ! echo "$vm_list" | grep -q "\b$vm_id\b"; then
                    vm_list="$vm_list $vm_id"
                fi
            fi
        fi
    done <<< "$log_content"

    echo "$vm_list" | xargs
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VM –∏–∑ –∑–∞–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
get_vms_from_backup_job() {
    local task_upid="$1"
    local node_name="$2"

    log_debug "=== –ò–ó–í–õ–ï–ß–ï–ù–ò–ï VM –ò–ó –ó–ê–î–ê–ù–ò–Ø ==="
    log_debug "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ VM –∏–∑ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ API: $task_upid"

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥ –∑–∞–¥–∞–Ω–∏—è
    local log_response=$(get_task_log "$task_upid")
    if [ -z "$log_response" ]; then
        log_debug "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è $task_upid"
        echo ""
        return
    fi

    local log_content=$(echo "$log_response" | jq -r '.data[]?.t // empty' 2>/dev/null)
    if [ -z "$log_content" ]; then
        log_debug "–û–®–ò–ë–ö–ê: –õ–æ–≥ –ø—É—Å—Ç–æ–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è $task_upid"
        echo ""
        return
    fi

    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞)
    local job_line=$(echo "$log_content" | head -10 | grep "starting new backup job: vzdump" | head -1)

    if [ -n "$job_line" ]; then
        log_debug "–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞: $job_line"

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ VM ID –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        local vm_ids=""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sed –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å—Ç–∏ –º–µ–∂–¥—É vzdump –∏ --
        local vm_section=$(echo "$job_line" | sed -n 's/.*vzdump \([^-]*\)--.*/\1/p' | head -1)
        if [ -n "$vm_section" ]; then
            vm_ids=$(echo "$vm_section" | grep -oE '[0-9]+' | xargs)
            log_debug "–ú–µ—Ç–æ–¥ 1 (sed): VM IDs = '$vm_ids'"
        fi

        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        if [ -z "$vm_ids" ]; then
            vm_ids=$(echo "$job_line" | grep -oP 'vzdump\s+\K[^-]*' | head -1 | grep -oE '[0-9]+' | xargs)
            log_debug "–ú–µ—Ç–æ–¥ 2 (grep): VM IDs = '$vm_ids'"
        fi

        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º awk
        if [ -z "$vm_ids" ]; then
            vm_ids=$(echo "$job_line" | awk '{
                found_vzdump = 0
                for(i=1; i<=NF; i++) {
                    if($i == "vzdump") {
                        found_vzdump = 1
                        continue
                    }
                    if(found_vzdump && $i ~ /^--/) {
                        break
                    }
                    if(found_vzdump && $i ~ /^[0-9]+$/) {
                        printf "%s ", $i
                    }
                }
            }' | xargs)
            log_debug "–ú–µ—Ç–æ–¥ 3 (awk): VM IDs = '$vm_ids'"
        fi

        if [ -n "$vm_ids" ]; then
            log_debug "–£–°–ü–ï–•: –ò–∑–≤–ª–µ—á–µ–Ω—ã VM –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞: '$vm_ids'"
            echo "$vm_ids"
            return
        else
            log_debug "–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å VM ID –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: '$job_line'"
        fi
    fi

    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: FALLBACK - –∏—â–µ–º –≤—Å–µ VM –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –ª–æ–≥–µ
    log_debug "–ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ - –ø–æ–∏—Å–∫ 'Starting Backup' –≤ –ª–æ–≥–µ"
    local fallback_vms=""
    while IFS= read -r line; do
        if echo "$line" | grep -qE "(Starting Backup of VM|ERROR.*VM)" ; then
            local vm_id=$(echo "$line" | grep -oP "VM \K\d+" | head -1)
            if [ -n "$vm_id" ] && ! echo "$fallback_vms" | grep -qw "$vm_id"; then
                fallback_vms="$fallback_vms $vm_id"
            fi
        fi
    done <<< "$log_content"

    fallback_vms=$(echo "$fallback_vms" | xargs)
    log_debug "Fallback –º–µ—Ç–æ–¥: VM IDs = '$fallback_vms'"

    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ –∏ fallback –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Å–∞–º–æ–≥–æ UPID
    if [ -z "$fallback_vms" ]; then
        log_debug "–ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å VM –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
        local any_vm_mentions=$(echo "$log_content" | grep -oE 'VM [0-9]+|vm [0-9]+' | grep -oE '[0-9]+' | sort -u | xargs)
        if [ -n "$any_vm_mentions" ]; then
            fallback_vms="$any_vm_mentions"
            log_debug "–ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è VM: '$fallback_vms'"
        fi
    fi

    log_debug "=== –ò–¢–û–ì –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø VM ==="
    log_debug "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '$fallback_vms'"
    echo "$fallback_vms"
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VM —á–µ—Ä–µ–∑ API
validate_vm_exists() {
    local vm_id="$1"
    local node_name="$2"

    if ! [[ "$vm_id" =~ ^[0-9]+$ ]]; then
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º QEMU
    local qemu_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/qemu/${vm_id}/config" 2>/dev/null)
    if echo "$qemu_response" | grep -q '"data"'; then
        return 0
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LXC
    local lxc_response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/lxc/${vm_id}/config" 2>/dev/null)
    if echo "$lxc_response" | grep -q '"data"'; then
        return 0
    fi

    return 1
}

extract_node_from_upid() {
    local task_upid="$1"
    echo "$task_upid" | cut -d: -f2
}

get_task_log() {
    local task_upid="$1"
    local node_name
    local mode=$(get_monitoring_mode)
    if [ "$mode" = "node" ]; then
        node_name="$PROXMOX_NODE"
    else
        node_name=$(extract_node_from_upid "$task_upid")
    fi
    curl -s -k \
        -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/tasks/${task_upid}/log?limit=0" 2>/dev/null
}

extract_storage_from_log() {
    local log_content="$1"
    local storage=""
    storage=$(echo "$log_content" | grep -oP -- "--storage \K[^\s]+" | head -1)
    if [ -n "$storage" ]; then
        echo "$storage"
        return
    fi
    storage=$(echo "$log_content" | grep -oP "creating vzdump archive.*?/\K[^/]+" | head -1)
    if [ -n "$storage" ]; then
        echo "$storage"
        return
    fi
    storage=$(echo "$log_content" | grep -oP "/mnt/pve/\K[^/]+" | head -1)
    if [ -n "$storage" ]; then
        echo "$storage"
        return
    fi
    echo "Backups"
}
# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫
extract_error_from_log() {
    local log_content="$1"
    local vm_id="$2"

    local error_msg=""

    if [ -n "$vm_id" ]; then
        log_debug "=== –ü–û–ò–°–ö –û–®–ò–ë–ö–ò –î–õ–Ø VM $vm_id ==="

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ –ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π VM
        local vm_log_block=""
        local in_vm_block=false

        while IFS= read -r line; do
            # –ù–∞—á–∏–Ω–∞–µ–º –±–ª–æ–∫ –¥–ª—è –Ω–∞—à–µ–π VM
            if echo "$line" | grep -q "Starting Backup of VM $vm_id"; then
                in_vm_block=true
                vm_log_block="$vm_log_block$line"$'\n'
                continue
            fi

            # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –±–ª–æ–∫ –¥—Ä—É–≥–æ–π VM –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if echo "$line" | grep -q "Starting Backup of VM" && [ "$in_vm_block" = true ]; then
                break
            fi

            if echo "$line" | grep -q "Backup job finished\|TASK ERROR\|aborting backup job" && [ "$in_vm_block" = true ]; then
                vm_log_block="$vm_log_block$line"$'\n'
                break
            fi

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫ –Ω–∞—à–µ–π VM
            if [ "$in_vm_block" = true ]; then
                vm_log_block="$vm_log_block$line"$'\n'

                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ "Finished Backup of VM" –¥–ª—è –Ω–∞—à–µ–π VM, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if echo "$line" | grep -q "Finished Backup of VM $vm_id"; then
                    break
                fi
            fi
        done <<< "$log_content"

        log_debug "–ë–ª–æ–∫ –ª–æ–≥–∞ –¥–ª—è VM $vm_id (${#vm_log_block} —Å–∏–º–≤–æ–ª–æ–≤)"

        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º –ø—Ä—è–º—É—é –æ—à–∏–±–∫—É "ERROR: Backup of VM XXX failed"
        error_msg=$(echo "$vm_log_block" | grep "ERROR: Backup of VM $vm_id failed" | head -1)
        if [ -n "$error_msg" ]; then
            log_debug "–ù–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: '$error_msg'"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
            local failure_reason=$(echo "$error_msg" | sed "s/ERROR: Backup of VM $vm_id failed - //" | sed 's/^INFO: //')
            if [ -n "$failure_reason" ] && [ "$failure_reason" != "$error_msg" ]; then
                error_msg="$failure_reason"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: QMP TIMEOUT ERRORS (–û—à–∏–±–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞ QMP –∫–æ–º–∞–Ω–¥)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "VM $vm_id qmp command.*failed.*got timeout"; then
                local qmp_line=$(echo "$vm_log_block" | grep -i "VM $vm_id qmp command.*failed.*got timeout" | head -1)
                local qmp_command=$(echo "$qmp_line" | grep -oP "qmp command '\K[^']*" | head -1)
                error_msg="qmp command '$qmp_command' failed - got timeout"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ QMP timeout –æ—à–∏–±–∫–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: FLEECE IMAGE ERRORS (–û—à–∏–±–∫–∏ —Ñ–ª–∏—Å–∏–Ω–≥–∞)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "disk image.*fleece.*already exists"; then
                error_msg=$(echo "$vm_log_block" | grep -i "disk image.*fleece.*already exists" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ fleece image –æ—à–∏–±–∫–∞: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "zfs error.*cannot create.*fleece.*dataset already"; then
                error_msg=$(echo "$vm_log_block" | grep -i "zfs error.*cannot create.*fleece.*dataset already" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ ZFS fleece –æ—à–∏–±–∫–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 4: STORAGE ACCESS ERRORS (–û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "storage.*does not exist"; then
                error_msg=$(echo "$vm_log_block" | grep -i "storage.*does not exist" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "unable to open.*Stale file handle"; then
                error_msg=$(echo "$vm_log_block" | grep -i "unable to open.*Stale file handle" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ Stale file handle: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "can't activate storage.*directory.*does not exist"; then
                error_msg=$(echo "$vm_log_block" | grep -i "can't activate storage.*directory.*does not exist" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 5: DISK SPACE ISSUES (–ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Å—Ç–æ–º –Ω–∞ –¥–∏—Å–∫–µ)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "backup write data failed.*No space left on device"; then
                error_msg="backup write data failed: No space left on device"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–µ—Å—Ç–∞: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "/tmp runs out of space"; then
                error_msg="/tmp runs out of space"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è /tmp: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "No space left on device"; then
                error_msg=$(echo "$vm_log_block" | grep -i "No space left on device" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //' | sed 's/^[0-9:.-]*\s*//')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–µ—Å—Ç–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 6: NETWORK AND CONNECTIVITY ISSUES (–°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "backup connect failed.*backup owner check failed"; then
                error_msg="backup connect failed: command error: backup owner check failed"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ backup owner check: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "backup write data failed.*pipelined request failed"; then
                error_msg="backup write data failed: pipelined request failed"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ pipelined request: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "backup.*failed.*connection"; then
                error_msg=$(echo "$vm_log_block" | grep -i "backup.*failed.*connection" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 7: CONTAINER-SPECIFIC ERRORS (–û—à–∏–±–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "tar.*permission denied"; then
                error_msg=$(echo "$vm_log_block" | grep -i "tar.*permission denied" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //' | sed 's/^[0-9:.-]*\s*//')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ tar permission denied: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "lxc-usernsexec.*failed.*exit code"; then
                error_msg=$(echo "$vm_log_block" | grep -i "lxc-usernsexec.*failed.*exit code" | head -1)
                error_msg=$(echo "$error_msg" | sed 's/^ERROR: //' | sed 's/^INFO: //')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ lxc-usernsexec: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 8: –°–ò–°–¢–ï–ú–ù–´–ï –û–®–ò–ë–ö–ò PROXMOX
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "pvestatd.service.*Main process exited.*SEGV"; then
                error_msg="pvestatd.service: Main process exited, code=killed, status=11/SEGV"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ pvestatd SEGV: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "backup_complete_cb -5"; then
                error_msg="backup_complete_cb -5"
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ backup_complete_cb: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 9: –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ "ERROR: Backup of VM"
        if [ -z "$error_msg" ]; then
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é INFO —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ—Ç–∞–ª–∏
            local context_line=$(echo "$vm_log_block" | grep -B1 "ERROR: Backup of VM $vm_id" | head -1)
            if [ -n "$context_line" ] && echo "$context_line" | grep -qi "INFO:.*\(paused\|locked\|cannot\|failed\|error\|interrupted\)"; then
                error_msg=$(echo "$context_line" | sed 's/^INFO: //' | sed 's/^[0-9:.-]*\s*//')
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 10: –ò—â–µ–º "interrupted by signal" –∏ "aborting backup job"
        if [ -z "$error_msg" ]; then
            if echo "$vm_log_block" | grep -qi "interrupted by signal"; then
                local interrupt_line=$(echo "$vm_log_block" | grep "interrupted by signal" | head -1)
                error_msg=$(echo "$interrupt_line" | sed 's/^ERROR: //' | sed 's/^INFO: //' | sed 's/^[0-9:.-]*\s*//')
                log_debug "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É: '$error_msg'"
            elif echo "$vm_log_block" | grep -qi "aborting backup job"; then
                error_msg="aborting backup job"
                log_debug "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 11: –ò—â–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –≤ –±–ª–æ–∫–µ VM
        if [ -z "$error_msg" ]; then
            error_msg=$(echo "$vm_log_block" | grep -i "ERROR\|failed" | grep -i "VM $vm_id\|$vm_id.*failed" | tail -1)
            if [ -n "$error_msg" ]; then
                log_debug "–ù–∞–π–¥–µ–Ω–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ VM: '$error_msg'"
            fi
        fi

        # –ü–†–ò–û–†–ò–¢–ï–¢ 12: –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        if [ -z "$error_msg" ]; then
            # –ò—â–µ–º "VM is paused", "VM is locked", "cannot shutdown" –∏ –¥—Ä—É–≥–∏–µ
            error_msg=$(echo "$vm_log_block" | grep -i "VM is paused\|VM is locked\|cannot shutdown\|permission denied\|timeout\|VM not running" | tail -1)
            if [ -n "$error_msg" ]; then
                log_debug "–ù–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏: '$error_msg'"
                # –û—á–∏—â–∞–µ–º –æ—Ç INFO: –ø—Ä–µ—Ñ–∏–∫—Å–∞
                error_msg=$(echo "$error_msg" | sed 's/^INFO: //' | sed 's/^ERROR: //' | sed 's/^[0-9:.-]*\s*//')
            fi
        fi

        log_debug "–ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è VM $vm_id: '$error_msg'"
    fi

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π VM
    if [ -z "$error_msg" ]; then
        error_msg=$(echo "$log_content" | grep -i "TASK ERROR" | tail -1)
    fi
    if [ -z "$error_msg" ]; then
        error_msg=$(echo "$log_content" | grep -i "job errors" | tail -1)
    fi
    if [ -z "$error_msg" ]; then
        error_msg=$(echo "$log_content" | grep -i "ERROR:" | tail -1)
    fi

    # –£–±–∏—Ä–∞–µ–º timestamp –∏ —á–∏—Å—Ç–∏–º
    error_msg=$(echo "$error_msg" | sed 's/^[0-9:.-]*\s*//' | sed 's/^INFO: //' | sed 's/^ERROR: //')

    if [ -n "$error_msg" ]; then
        echo "$error_msg"
    else
        echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤
extract_backup_info_from_log() {
    local log_content="$1"
    local vm_id="$2"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π VM
    local backup_size="Unknown"
    local backup_type="Unknown"

    log_debug "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ –¥–ª—è VM $vm_id"

    # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –≤ –±–ª–æ–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π VM
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ –ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π VM
    local vm_log_block=""
    local in_vm_block=false

    while IFS= read -r line; do
        # –ù–∞—á–∏–Ω–∞–µ–º –±–ª–æ–∫ –¥–ª—è –Ω–∞—à–µ–π VM
        if echo "$line" | grep -q "Starting Backup of VM $vm_id"; then
            in_vm_block=true
            vm_log_block="$vm_log_block$line"$'\n'
            continue
        fi

        # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –±–ª–æ–∫ –¥—Ä—É–≥–æ–π VM, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if echo "$line" | grep -q "Starting Backup of VM" && [ "$in_vm_block" = true ]; then
            break
        fi

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫ –Ω–∞—à–µ–π VM
        if [ "$in_vm_block" = true ]; then
            vm_log_block="$vm_log_block$line"$'\n'

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ "Finished Backup of VM" –¥–ª—è –Ω–∞—à–µ–π VM, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if echo "$line" | grep -q "Finished Backup of VM $vm_id"; then
                break
            fi
        fi
    done <<< "$log_content"

    log_debug "–ë–ª–æ–∫ –ª–æ–≥–∞ –¥–ª—è VM $vm_id (${#vm_log_block} —Å–∏–º–≤–æ–ª–æ–≤)"

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –≤ –±–ª–æ–∫–µ —ç—Ç–æ–π VM
    # 1. –ü–†–ò–û–†–ò–¢–ï–¢: "archive file size: 14.99GB"
    local size_line=$(echo "$vm_log_block" | grep "archive file size:" | head -1)
    if [ -n "$size_line" ]; then
        backup_size=$(echo "$size_line" | grep -oP "archive file size: \K[^\s]+" | head -1)
        log_debug "–ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∏–∑ 'archive file size': $backup_size"
    else
        # 2. FALLBACK: "transferred 50.00 GiB in"
        size_line=$(echo "$vm_log_block" | grep "transferred.*in" | head -1)
        if [ -n "$size_line" ]; then
            backup_size=$(echo "$size_line" | grep -oP "transferred \K[^\s]+\s+[^\s]+" | head -1)
            log_debug "–ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä –∏–∑ 'transferred': $backup_size"
        else
            # 3. –ü–û–°–õ–ï–î–ù–ò–ô FALLBACK: –∏—â–µ–º –≤ –±–ª–æ–∫–µ —Ä–∞–∑–º–µ—Ä –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            size_line=$(echo "$vm_log_block" | grep "100%" | tail -1)
            if [ -n "$size_line" ]; then
                backup_size=$(echo "$size_line" | grep -oP "100% \(\K[^)]+" | head -1)
                log_debug "–ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: $backup_size"
            fi
        fi
    fi

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –±—ç–∫–∞–ø–∞ –∏–∑ –±–ª–æ–∫–∞ VM —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    local backup_mode_line=$(echo "$vm_log_block" | grep "backup mode:" | head -1)
    if [ -n "$backup_mode_line" ]; then
        local mode=$(echo "$backup_mode_line" | grep -oP "backup mode: \K[^\s]+" | head -1)
        case "$mode" in
            "stop")
                backup_type="–û—Å—Ç–∞–Ω–æ–≤–∫–∞"
                ;;
            "snapshot")
                backup_type="–°–Ω–∞–ø—à–æ—Ç"
                ;;
            "suspend")
                backup_type="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
                ;;
            *)
                backup_type="$mode"
                ;;
        esac
    fi

    log_debug "–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è VM $vm_id: —Ä–∞–∑–º–µ—Ä='$backup_size', —Ç–∏–ø='$backup_type'"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Ä–∞–∑–º–µ—Ä|—Ç–∏–ø"
    echo "${backup_size}|${backup_type}"
}

# ========================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê –°–¢–ê–¢–£–°–û–í
# ========================
is_user_interrupted() {
    local task_status="$1"
    local log_content="$2"

    log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è - —Å—Ç–∞—Ç—É—Å: '$task_status'"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    case "$task_status" in
        "stopped")
            log_debug "–ó–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'stopped'"
            return 0
            ;;
        "interrupted by signal")
            log_debug "–ó–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'interrupted by signal'"
            return 0
            ;;
        "ERROR"|"job errors"|"unexpected status")
            log_debug "–ó–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '$task_status', –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞"
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            if echo "$log_content" | grep -qi "interrupted by signal\|TASK ERROR.*interrupted\|aborting backup job"; then
                log_debug "–ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –ª–æ–≥–µ"
                return 0
            fi
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if echo "$log_content" | grep -q "status = running" && echo "$log_content" | grep -qE "(ERROR|Failed|TASK ERROR)" && ! echo "$log_content" | grep -q "Finished Backup"; then
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if ! echo "$log_content" | grep -qi "VM is locked\|permission denied\|disk.*error\|storage.*error\|network.*error\|VM is paused\|cannot shutdown\|qmp.*timeout\|No space left\|fleece.*already exists"; then
                    log_debug "–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                    return 0
                fi
            fi
            log_debug "–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–µ, —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞"
            ;;
        *)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            if echo "$task_status" | grep -qi "interrupt\|abort\|cancel\|stop"; then
                log_debug "–°—Ç–∞—Ç—É—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: '$task_status'"
                return 0
            fi
            ;;
    esac

    return 1
}

is_task_with_errors() {
    local task_status="$1"
    local log_content="$2"

    log_debug "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ - —Å—Ç–∞—Ç—É—Å: '$task_status'"

    # –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –æ—à–∏–±–∫–∞
    if [ "$task_status" = "ERROR" ] || [ "$task_status" = "job errors" ] || [ "$task_status" = "unexpected status" ]; then
        # –ù–æ —Å–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
        if ! is_user_interrupted "$task_status" "$log_content"; then
            return 0
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–≥–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)
    if echo "$log_content" | grep -qi "backup.*failed\|ERROR.*VM.*failed\|VM is locked\|permission denied\|VM is paused\|cannot shutdown\|VM not running\|qmp.*timeout\|No space left\|fleece.*already exists\|storage.*does not exist" && ! echo "$log_content" | grep -qi "interrupted"; then
        log_debug "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–µ –∑–∞–¥–∞–Ω–∏—è (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ)"
        return 0
    fi

    return 1
}
# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ VM
get_vm_backup_status() {
    local log_content="$1"
    local vm_id="$2"

    log_debug "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è VM $vm_id"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ VM —É—Å–ø–µ—à–Ω–æ
    if echo "$log_content" | grep -q "Finished Backup of VM $vm_id"; then
        log_debug "VM $vm_id: –Ω–∞–π–¥–µ–Ω Finished Backup - SUCCESS"
        echo "SUCCESS"
        return
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–π VM
    if echo "$log_content" | grep -qi "ERROR.*VM $vm_id\|Backup of VM $vm_id failed\|VM $vm_id.*failed\|VM $vm_id.*error"; then
        log_debug "VM $vm_id: –Ω–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ - ERROR"
        echo "ERROR"
        return
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –≤–æ–æ–±—â–µ –±—ç–∫–∞–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π VM
    if echo "$log_content" | grep -q "Starting Backup of VM $vm_id"; then
        log_debug "VM $vm_id: –Ω–∞—á–∞–ª–∞—Å—å, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å"
        # VM –Ω–∞—á–∞–ª–∞—Å—å, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å - –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ —É–ø–∞–ª–∞
        if echo "$log_content" | grep -qi "interrupted by signal\|aborting backup job"; then
            log_debug "VM $vm_id: INTERRUPTED"
            echo "INTERRUPTED"
            return
        else
            log_debug "VM $vm_id: STARTED_BUT_FAILED"
            echo "STARTED_BUT_FAILED"
            return
        fi
    fi

    # VM –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
    if echo "$log_content" | grep -qi "interrupted by signal\|aborting backup job"; then
        log_debug "VM $vm_id: CANCELLED (–∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ)"
        echo "CANCELLED"
        return
    elif echo "$log_content" | grep -qi "TASK ERROR\|job errors\|backup.*failed"; then
        log_debug "VM $vm_id: FAILED_TO_START (–æ—à–∏–±–∫–∞ –¥–æ –Ω–∞—á–∞–ª–∞)"
        echo "FAILED_TO_START"
        return
    fi

    log_debug "VM $vm_id: UNKNOWN —Å—Ç–∞—Ç—É—Å"
    echo "UNKNOWN"
}

# ========================
# –§–£–ù–ö–¶–ò–ò VM –ò–ù–§–û–†–ú–ê–¶–ò–ò
# ========================
get_vm_name() {
    local vm_id="$1"
    local node_name="$2"
    if ! [[ "$vm_id" =~ ^[0-9]+$ ]]; then
        echo "Unknown"
        return
    fi
    # –ü—Ä–æ–±—É–µ–º QEMU
    local vm_info=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/qemu/${vm_id}/config" 2>/dev/null)
    if [ -n "$vm_info" ]; then
        local vm_name=$(echo "$vm_info" | jq -r '.data.name // empty' 2>/dev/null)
        if [ -n "$vm_name" ] && [ "$vm_name" != "empty" ] && [ "$vm_name" != "null" ]; then
            echo "$vm_name"
            return
        fi
    fi
    # –ü—Ä–æ–±—É–µ–º LXC
    vm_info=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/lxc/${vm_id}/config" 2>/dev/null)
    if [ -n "$vm_info" ]; then
        local vm_name=$(echo "$vm_info" | jq -r '.data.hostname // .data.name // empty' 2>/dev/null)
        if [ -n "$vm_name" ] && [ "$vm_name" != "empty" ] && [ "$vm_name" != "null" ]; then
            echo "$vm_name"
            return
        fi
    fi
    echo "Unknown"
}

get_vm_type() {
    local vm_id="$1"
    local node_name="$2"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º QEMU
    local qemu_info=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/qemu/${vm_id}/config" 2>/dev/null)
    if echo "$qemu_info" | grep -q '"data"'; then
        echo "VM"
        return
    fi
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LXC
    local lxc_info=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" \
        "${PROXMOX_API_URL}/nodes/${node_name}/lxc/${vm_id}/config" 2>/dev/null)
    if echo "$lxc_info" | grep -q '"data"'; then
        echo "CT"
        return
    fi
    echo "Unknown"
}

# ========================
# –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô
# ========================
create_error_message() {
    local task_upid="$1"
    local vm_id="$2"
    local node="$3"
    local error_msg="$4"
    local start_time="$5"

    local cluster_name=$(get_cluster_info)
    local vm_name=$(get_vm_name "$vm_id" "$node")
    local vm_type=$(get_vm_type "$vm_id" "$node")

    # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    local log_response=$(get_task_log "$task_upid")
    local storage="Backups"
    if [ -n "$log_response" ]; then
        local log_content=$(echo "$log_response" | jq -r '.data[]?.t // empty' 2>/dev/null)
        if [ -n "$log_content" ]; then
            storage=$(extract_storage_from_log "$log_content")
        fi
    fi

    local current_time=$(date '+%d.%m.%Y %H:%M:%S')
    local formatted_start_time=$(format_time "$start_time")

    local message="üö® <b>–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ VM/LXC</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ</b>
      ‚Ä¢ <b>–¢–∏–ø:</b> vzdump backup
      ‚Ä¢ <b>–ö–ª–∞—Å—Ç–µ—Ä:</b> $cluster_name
      ‚Ä¢ <b>–£–∑–µ–ª:</b> $node

üñ•Ô∏è <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞</b>
      ‚Ä¢ <b>ID:</b> $vm_id
      ‚Ä¢ <b>–ò–º—è:</b> $vm_name
      ‚Ä¢ <b>–¢–∏–ø:</b> $vm_type
      ‚Ä¢ <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</b> $storage

‚ùå <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</b>
      ‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ—É–¥–∞—á–Ω–æ
      ‚Ä¢ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> $error_msg
      ‚Ä¢ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> $formatted_start_time
      ‚Ä¢ <b>–í—Ä–µ–º—è –æ—à–∏–±–∫–∏:</b> $current_time

üè∑ #backup_error #vm_${vm_id} #node_${node}"

    echo "$message"
}

create_stopped_message() {
    local task_upid="$1"
    local node="$2"
    local start_time="$3"
    local log_content="$4"

    local cluster_name=$(get_cluster_info)

    # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    local storage="Backups"
    if [ -n "$log_content" ]; then
        storage=$(extract_storage_from_log "$log_content")
    fi

    local current_time=$(date '+%d.%m.%Y %H:%M:%S')
    local formatted_start_time=$(format_time "$start_time")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    local stop_reason="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    if echo "$log_content" | grep -qi "interrupted by signal"; then
        stop_reason="–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (CTRL+C –∏–ª–∏ Stop)"
    elif echo "$log_content" | grep -qi "aborting backup job"; then
        stop_reason="–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é"
    elif echo "$log_content" | grep -qi "TASK ERROR.*interrupted"; then
        stop_reason="–ó–∞–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    fi

    local message="üõë <b>–ó–∞–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ</b>
      ‚Ä¢ <b>–¢–∏–ø:</b> vzdump backup
      ‚Ä¢ <b>–ö–ª–∞—Å—Ç–µ—Ä:</b> $cluster_name
      ‚Ä¢ <b>–£–∑–µ–ª:</b> $node
      ‚Ä¢ <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</b> $storage

‚ö†Ô∏è <b>–î–µ—Ç–∞–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</b>
      ‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> $stop_reason
      ‚Ä¢ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> $formatted_start_time
      ‚Ä¢ <b>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> $current_time

üè∑ #backup_stopped #node_${node}"

    echo "$message"
}
# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
create_backup_summary() {
    local task_upid="$1"
    local task_status="$2"
    local start_time="$3"
    local end_time="$4"
    local node="$5"

    local log_response=$(get_task_log "$task_upid")
    local log_content=""
    local storage="Backups"

    if [ -n "$log_response" ]; then
        log_content=$(echo "$log_response" | jq -r '.data[]?.t // empty' 2>/dev/null | tr '\n' '\n')
        if [ -n "$log_content" ]; then
            storage=$(extract_storage_from_log "$log_content")
        fi
    fi

    log_message "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: $task_upid"

    # –ü–∞—Ä—Å–∏–º VM –≤ –∑–∞–¥–∞–Ω–∏–∏
    local total_vms=0
    local successful_vms=0
    local failed_vms=0
    local successful_list=""
    local failed_list=""
    local vm_list=""

    if [ -n "$log_content" ]; then
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï VM –∏–∑ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        local all_job_vms=$(get_vms_from_backup_job "$task_upid" "$node")
        if [ -n "$all_job_vms" ]; then
            # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ VM —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            local validated_vms=""
            for vm_id in $all_job_vms; do
                if validate_vm_exists "$vm_id" "$node"; then
                    validated_vms="$validated_vms $vm_id"
                    log_debug "VM $vm_id –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                else
                    log_debug "–í–ù–ò–ú–ê–ù–ò–ï: VM $vm_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –±—ã–ª–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏"
                    validated_vms="$validated_vms $vm_id"  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –æ—Ç—á–µ—Ç–∞
                fi
            done
            vm_list=$(echo "$validated_vms" | xargs)
            total_vms=$(echo "$vm_list" | wc -w)
            log_debug "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ VM –∏–∑ –∑–∞–¥–∞–Ω–∏—è: $vm_list (–≤—Å–µ–≥–æ: $total_vms)"
        else
            # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç—ã–µ VM)
            while IFS= read -r line; do
                if echo "$line" | grep -q "Starting Backup of VM"; then
                    vm_id=$(echo "$line" | grep -oP "Starting Backup of VM \K\d+")
                    if [ -n "$vm_id" ]; then
                        if ! echo "$vm_list" | grep -q "\b$vm_id\b"; then
                            vm_list="$vm_list $vm_id"
                            total_vms=$((total_vms + 1))
                        fi
                    fi
                fi
            done <<< "$log_content"
            log_debug "Fallback: –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞—Ç—ã–µ VM: $vm_list (–≤—Å–µ–≥–æ: $total_vms)"
        fi

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–π VM
        for vm_id in $vm_list; do
            local vm_name=$(get_vm_name "$vm_id" "$node")
            local vm_type=$(get_vm_type "$vm_id" "$node")
            local vm_status=$(get_vm_backup_status "$log_content" "$vm_id")

            log_debug "VM $vm_id ($vm_name) —Å—Ç–∞—Ç—É—Å: $vm_status"

            if [ "$vm_status" = "SUCCESS" ]; then
                local vm_duration=$(echo "$log_content" | grep "Finished Backup of VM $vm_id" | grep -oP "\(\K[^)]+" | head -1)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–∏–ø–µ –±—ç–∫–∞–ø–∞
                local backup_info=$(extract_backup_info_from_log "$log_content" "$vm_id")
                local backup_size=$(echo "$backup_info" | cut -d'|' -f1)
                local backup_type=$(echo "$backup_info" | cut -d'|' -f2)

                successful_vms=$((successful_vms + 1))

                # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
                if [ -z "$successful_list" ]; then
                    successful_list="      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî ${vm_duration:-Unknown}, $backup_size, [$backup_type]"
                else
                    successful_list="${successful_list}
      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî ${vm_duration:-Unknown}, $backup_size, [$backup_type]"
                fi
            else
                failed_vms=$((failed_vms + 1))

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–∞—á–∏
                local failure_reason="backup failed"

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–π VM
                local specific_error=$(extract_error_from_log "$log_content" "$vm_id")
                log_debug "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è VM $vm_id: '$specific_error'"

                # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                case "$vm_status" in
                    "ERROR")
                        # === QMP TIMEOUT ERRORS ===
                        if echo "$specific_error" | grep -qi "qmp command.*backup.*failed.*got timeout"; then
                            failure_reason="—Ç–∞–π–º-–∞—É—Ç QMP –∫–æ–º–∞–Ω–¥—ã backup"
                        elif echo "$specific_error" | grep -qi "qmp command.*query-proxmox-support.*failed.*got timeout"; then
                            failure_reason="—Ç–∞–π–º-–∞—É—Ç QMP –∫–æ–º–∞–Ω–¥—ã query-proxmox-support"
                        elif echo "$specific_error" | grep -qi "qmp command.*backup-cancel.*failed.*got timeout"; then
                            failure_reason="—Ç–∞–π–º-–∞—É—Ç QMP –∫–æ–º–∞–Ω–¥—ã backup-cancel"
                        elif echo "$specific_error" | grep -qi "qmp command.*failed.*got timeout"; then
                            local qmp_cmd=$(echo "$specific_error" | grep -oP "qmp command '\K[^']*" | head -1)
                            failure_reason="—Ç–∞–π–º-–∞—É—Ç QMP –∫–æ–º–∞–Ω–¥—ã ${qmp_cmd:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π}"

                        # === FLEECE IMAGE ERRORS ===
                        elif echo "$specific_error" | grep -qi "disk image.*fleece.*already exists"; then
                            failure_reason="–æ—à–∏–±–∫–∞ —Ñ–ª–∏—Å–∏–Ω–≥ –æ–±—Ä–∞–∑–∞ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
                        elif echo "$specific_error" | grep -qi "zfs error.*cannot create.*fleece.*dataset already"; then
                            failure_reason="–æ—à–∏–±–∫–∞ ZFS —Ñ–ª–∏—Å–∏–Ω–≥ –¥–∞—Ç–∞—Å–µ—Ç–∞ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
                        elif echo "$specific_error" | grep -qi "fleece"; then
                            failure_reason="–æ—à–∏–±–∫–∞ —Ñ–ª–∏—Å–∏–Ω–≥ –æ–±—Ä–∞–∑–∞"

                        # === STORAGE ACCESS ERRORS ===
                        elif echo "$specific_error" | grep -qi "storage.*does not exist"; then
                            local storage_name=$(echo "$specific_error" | grep -oP "storage '\K[^']*" | head -1)
                            failure_reason="—Ö—Ä–∞–Ω–∏–ª–∏—â–µ ${storage_name:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        elif echo "$specific_error" | grep -qi "unable to open.*Stale file handle"; then
                            failure_reason="–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É (Stale file handle)"
                        elif echo "$specific_error" | grep -qi "can't activate storage.*directory.*does not exist"; then
                            failure_reason="–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"

                        # === DISK SPACE ISSUES ===
                        elif echo "$specific_error" | grep -qi "backup write data failed.*No space left on device"; then
                            failure_reason="–Ω–µ—Ö–≤–∞—Ç–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"
                        elif echo "$specific_error" | grep -qi "/tmp runs out of space"; then
                            failure_reason="–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ /tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
                        elif echo "$specific_error" | grep -qi "No space left on device"; then
                            failure_reason="–Ω–µ—Ö–≤–∞—Ç–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"

                        # === NETWORK AND CONNECTIVITY ISSUES ===
                        elif echo "$specific_error" | grep -qi "backup connect failed.*backup owner check failed"; then
                            failure_reason="—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (backup owner check failed)"
                        elif echo "$specific_error" | grep -qi "backup write data failed.*pipelined request failed"; then
                            failure_reason="—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (pipelined request failed)"
                        elif echo "$specific_error" | grep -qi "backup.*failed.*connection"; then
                            failure_reason="—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

                        # === CONTAINER-SPECIFIC ERRORS ===
                        elif echo "$specific_error" | grep -qi "tar.*permission denied"; then
                            failure_reason="–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (tar permission denied)"
                        elif echo "$specific_error" | grep -qi "lxc-usernsexec.*failed.*exit code"; then
                            local exit_code=$(echo "$specific_error" | grep -oP "exit code \K\d+" | head -1)
                            failure_reason="–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (lxc-usernsexec –∫–æ–¥ ${exit_code:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π})"

                        # === –°–ò–°–¢–ï–ú–ù–´–ï –û–®–ò–ë–ö–ò PROXMOX ===
                        elif echo "$specific_error" | grep -qi "pvestatd.service.*Main process exited.*SEGV"; then
                            failure_reason="—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ (pvestatd segfault)"
                        elif echo "$specific_error" | grep -qi "backup_complete_cb -5"; then
                            failure_reason="—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ (backup_complete_cb -5)"

                        # === –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ===
                        elif echo "$specific_error" | grep -qi "VM is locked"; then
                            failure_reason="VM –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
                        elif echo "$specific_error" | grep -qi "VM is paused.*cannot shutdown"; then
                            failure_reason="VM –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                        elif echo "$specific_error" | grep -qi "VM is paused"; then
                            failure_reason="VM –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                        elif echo "$specific_error" | grep -qi "cannot shutdown"; then
                            failure_reason="–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VM"
                        elif echo "$specific_error" | grep -qi "permission denied"; then
                            failure_reason="–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
                        elif echo "$specific_error" | grep -qi "storage.*error\|disk.*error"; then
                            failure_reason="–æ—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"
                        elif echo "$specific_error" | grep -qi "network.*error"; then
                            failure_reason="–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏"
                        elif echo "$specific_error" | grep -qi "timeout"; then
                            failure_reason="–ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º-–∞—É—Ç"
                        elif echo "$specific_error" | grep -qi "interrupted by signal"; then
                            failure_reason="–ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Å–∏–≥–Ω–∞–ª—É"
                        elif echo "$specific_error" | grep -qi "VM not running"; then
                            failure_reason="VM –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
                        elif echo "$specific_error" | grep -qi "genisoimage.*failed.*interrupted by signal"; then
                            failure_reason="–ø—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ cloud-init –æ–±—Ä–∞–∑–∞"
                        elif echo "$specific_error" | grep -qi "command.*failed.*exit code"; then
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
                            local exit_code=$(echo "$specific_error" | grep -oP "exit code \K\d+" | head -1)
                            if [ -n "$exit_code" ]; then
                                failure_reason="–∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π $exit_code"
                            else
                                failure_reason="–∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
                            fi
                        elif [ -n "$specific_error" ] && [ "$specific_error" != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞" ]; then
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
                            if [ ${#specific_error} -lt 150 ]; then  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                                failure_reason="$specific_error"
                            else
                                failure_reason="–æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ (—Å–º. –ª–æ–≥–∏)"
                            fi
                        else
                            failure_reason="–æ—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ (—Å–º. –ª–æ–≥–∏)"
                        fi
                        ;;
                    "STARTED_BUT_FAILED")
                        failure_reason="–ø—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                        ;;
                    "INTERRUPTED")
                        failure_reason="–ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                        ;;
                    "CANCELLED")
                        failure_reason="–∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                        ;;
                    "FAILED_TO_START")
                        failure_reason="–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏—è)"
                        ;;
                    *)
                        failure_reason="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        ;;
                esac

                log_debug "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è VM $vm_id: '$failure_reason'"

                # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
                if [ -z "$failed_list" ]; then
                    failed_list="      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî $failure_reason"
                else
                    failed_list="${failed_list}
      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî $failure_reason"
                fi
            fi
        done
    fi

    # Fallback - –∏–∑–≤–ª–µ–∫–∞–µ–º VM ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
    if [ "$total_vms" -eq 0 ]; then
        local vm_id=$(echo "$log_content" | grep "starting new backup job: vzdump" | head -1 | grep -oP "vzdump \K\d+" | head -1)
        if [ -n "$vm_id" ] && [ "$vm_id" != "" ]; then
            total_vms=1
            local vm_name=$(get_vm_name "$vm_id" "$node")
            local vm_type=$(get_vm_type "$vm_id" "$node")

            if [ "$task_status" = "OK" ]; then
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–∏–ø–µ –¥–ª—è fallback
                local backup_info=$(extract_backup_info_from_log "$log_content" "$vm_id")
                local backup_size=$(echo "$backup_info" | cut -d'|' -f1)
                local backup_type=$(echo "$backup_info" | cut -d'|' -f2)

                successful_vms=1
                successful_list="      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî Unknown, $backup_size, [$backup_type]"
            else
                failed_vms=1
                failed_list="      ‚Ä¢ $vm_type $vm_id ($vm_name) ‚Äî Status: $task_status"
            fi
        else
            total_vms=1
            successful_vms=0
            failed_vms=1
            failed_list="      ‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è VM ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID"
        fi
    fi

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    local duration=""
    if [ -n "$start_time" ] && [ -n "$end_time" ] && [ "$start_time" != "Unknown" ] && [ "$end_time" != "Running" ]; then
        local start_epoch=$(date -d "$start_time" +%s 2>/dev/null)
        local end_epoch=$(date -d "$end_time" +%s 2>/dev/null)
        if [ -n "$start_epoch" ] && [ -n "$end_epoch" ]; then
            local duration_seconds=$((end_epoch - start_epoch))
            local hours=$((duration_seconds / 3600))
            local minutes=$(((duration_seconds % 3600) / 60))
            local seconds=$((duration_seconds % 60))
            if [ "$hours" -gt 0 ]; then
                duration="${hours}—á ${minutes}–º ${seconds}—Å"
            elif [ "$minutes" -gt 0 ]; then
                duration="${minutes}–º ${seconds}—Å"
            else
                duration="${seconds}—Å"
            fi
        fi
    fi

    local cluster_name=$(get_cluster_info)
    local node_status=$(get_node_info "$node")
    local storage_info=$(get_simple_storage_info "$storage" "$node")
    IFS='|' read -r avail_gb used_percent <<< "$storage_info"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    local storage_warning=$(check_storage_for_report "$storage" "$node")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
    local status_icon="üèÅ"
    if [ "$successful_vms" -eq "$total_vms" ] && [ "$failed_vms" -eq 0 ]; then
        status_icon="‚úÖ"
    elif [ "$failed_vms" -gt 0 ]; then
        status_icon="‚ö†Ô∏è"
    fi
    local formatted_end_time=$(format_time "$end_time")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    local message="$status_icon <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞</b>

üîß <b>–ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–£–°–ö–ê</b>
      ‚Ä¢ <b>–ö–ª–∞—Å—Ç–µ—Ä:</b> <code>$cluster_name</code>
      ‚Ä¢ <b>–£–∑–µ–ª:</b> <code>$node</code>
      ‚Ä¢ <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ –±–µ–∫–∞–ø–∞:</b> <code>$storage</code>
      ‚Ä¢ <b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> $formatted_end_time"

    if [ -n "$duration" ]; then
        message="$message

‚ö° <b>–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨</b>
      ‚Ä¢ <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> $duration
      ‚Ä¢ <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</b>
        - –°–≤–æ–±–æ–¥–Ω–æ: ${avail_gb} –ì–ë
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used_percent}%"
    fi

    message="$message

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´</b>
      ‚Ä¢ <b>–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:</b> <b>$total_vms</b>
      ‚Ä¢ <b>–£—Å–ø–µ—à–Ω–æ:</b> <b>$successful_vms</b>
      ‚Ä¢ <b>–° –æ—à–∏–±–∫–∞–º–∏:</b> <b>$failed_vms</b>"

    if [ -n "$successful_list" ] && [ "$successful_vms" -gt 0 ]; then
        message="$message

üéØ <b>–£—Å–ø–µ—à–Ω—ã–µ –í–ú/CT</b>
$successful_list"
    fi

    if [ -n "$failed_list" ] && [ "$failed_vms" -gt 0 ]; then
        message="$message

‚ö†Ô∏è <b>–ù–µ—É—Å–ø–µ—à–Ω—ã–µ –í–ú/CT</b>
$failed_list"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –∫–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if [ -n "$storage_warning" ]; then
        message="$message$storage_warning"
    fi

    message="$message

üè∑ #backup_summary #node_${node}"

    log_message "–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: $successful_vms/$total_vms —É—Å–ø–µ—à–Ω–æ"
    echo "$message"
}
# ========================
# –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# ========================
touch "$SENT_TASKS_FILE"
touch "$SENT_ERRORS_FILE"
touch "$TRACKING_TASKS_FILE"
touch "$LOG_FILE"

log_message "=== Proxmox Backup Monitor Started v3.9 ==="

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
cluster_name=$(get_cluster_info)
current_node=$(hostname)
node_status=$(get_node_info "$current_node" 2>/dev/null || echo "Status: Online")

log_debug "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
log_debug "cluster_name='$cluster_name', current_node='$current_node', node_status='$node_status'"

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Proxmox Backup Monitor
startup_message="<b>Proxmox Backup Monitor</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üõ†Ô∏è <b>–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø</b>
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ–ó–∞–ø—É—â–µ–Ω
‚îÉ <b>–í–µ—Ä—Å–∏—è:</b> v1.0
‚îÉ <b>–ö–ª–∞—Å—Ç–µ—Ä:</b> $cluster_name
‚îÉ <b>–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b> $(get_monitoring_mode)
‚îÉ <b>–£–∑–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> $current_node
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ <b>DEBUG —Ä–µ–∂–∏–º:</b> $([ "$DEBUG_ENABLED" = "true" ] && echo "üîç–í–∫–ª—é—á–µ–Ω" || echo "üîí–û—Ç–∫–ª—é—á–µ–Ω")
‚îÉ <b>–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:</b> $([ "$CLEANUP_ENABLED" = "true" ] && echo "üßπ–í–∫–ª—é—á–µ–Ω–∞" || echo "üîí–û—Ç–∫–ª—é—á–µ–Ω–∞")
‚îÉ <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:</b> $([ "$STORAGE_WARNING_ENABLED" = "true" ] && echo "üìä–í –æ—Ç—á–µ—Ç–∞—Ö ($STORAGE_WARNING_THRESHOLD%)" || echo "üîí–û—Ç–∫–ª—é—á–µ–Ω—ã")
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> $(date '+%d.%m.%Y %H:%M:%S')

üè∑ #monitoring_started"

log_debug "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
if send_telegram_message "$startup_message" "true"; then
    log_message "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
else
    log_message "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
fi

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while true; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏
    check_cleanup_needed

    log_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –±–µ–∫–∞–ø–∞..."

    if ! check_api_connection; then
        log_message "–û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"
        sleep $CHECK_INTERVAL
        continue
    fi

    tasks_url=$(get_tasks_url)
    response=$(curl -s -k -H "Authorization: $PROXMOX_API_TOKEN" "$tasks_url" 2>/dev/null)

    if [ -z "$response" ] || ! echo "$response" | jq . >/dev/null 2>&1; then
        log_message "–û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"
        sleep $CHECK_INTERVAL
        continue
    fi

    temp_tasks_file=$(mktemp)
    echo "$response" | jq -c '.data[]?' 2>/dev/null > "$temp_tasks_file"

    while IFS= read -r task; do
        if [ -z "$task" ]; then
            continue
        fi

        task_id=$(echo "$task" | jq -r '.upid // empty')
        task_type=$(echo "$task" | jq -r '.type // empty')
        task_status=$(echo "$task" | jq -r '.status // empty')
        task_starttime=$(echo "$task" | jq -r '.starttime // empty')
        task_endtime=$(echo "$task" | jq -r '.endtime // empty')
        task_node=$(echo "$task" | jq -r '.node // empty')

        # –§–∏–ª—å—Ç—Ä—ã
        if [ "$task_type" != "vzdump" ]; then
            continue
        fi

        # DEBUG: –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ vzdump –∑–∞–¥–∞–Ω–∏—è —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        log_debug "=== –ù–ê–ô–î–ï–ù–û VZDUMP –ó–ê–î–ê–ù–ò–ï ==="
        log_debug "ID: $task_id"
        log_debug "–°—Ç–∞—Ç—É—Å: '$task_status'"
        log_debug "StartTime: $task_starttime"
        log_debug "EndTime: $task_endtime"
        log_debug "Node: $task_node"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è running –∑–∞–¥–∞—á
        if [ "$task_status" = "running" ] || [ -z "$task_status" ]; then
            if [ -n "$task_starttime" ] && [ "$task_starttime" != "null" ]; then
                current_time=$(date +%s)
                task_age=$((current_time - task_starttime))
                if [ "$task_age" -gt "$MAX_TASK_AGE" ]; then
                    log_debug "–ü–†–û–ü–£–°–ö: running –∑–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ"
                    continue
                fi
            fi
        fi

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è
        if [ -n "$task_starttime" ] && [ "$task_starttime" != "null" ]; then
            start_time=$(date -d "@$task_starttime" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
        else
            start_time="Unknown"
        fi

        if [ -n "$task_endtime" ] && [ "$task_endtime" != "null" ]; then
            end_time=$(date -d "@$task_endtime" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Running")
        else
            end_time="Running"
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ running –∑–∞–¥–∞–Ω–∏—è—Ö
        if [ "$task_status" = "running" ] || [ -z "$task_status" ]; then
            log_response=$(get_task_log "$task_id")
            if [ -n "$log_response" ]; then
                log_content=$(echo "$log_response" | jq -r '.data[]?.t // empty' 2>/dev/null)
                if [ -n "$log_content" ]; then
                    # –ò—â–µ–º VM —Å –æ—à–∏–±–∫–∞–º–∏ –≤ –ª–æ–≥–µ
                    while IFS= read -r line; do
                        if echo "$line" | grep -q "Starting Backup of VM"; then
                            vm_id=$(echo "$line" | grep -oP "Starting Backup of VM \K\d+")
                            if [ -n "$vm_id" ]; then
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –¥–ª—è —ç—Ç–æ–π VM
                                if echo "$log_content" | grep -qi "error.*VM $vm_id\|VM $vm_id.*error\|VM $vm_id.*failed\|qmp.*timeout.*VM $vm_id\|fleece.*VM $vm_id\|No space left.*VM $vm_id"; then
                                    error_id="${task_id}_${vm_id}"
                                    if ! error_already_sent "$error_id"; then
                                        error_msg=$(extract_error_from_log "$log_content" "$vm_id")
                                        error_message=$(create_error_message "$task_id" "$vm_id" "$task_node" "$error_msg" "$start_time")
                                        if send_telegram_message "$error_message"; then
                                            mark_error_as_sent "$error_id"
                                            log_message "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ VM $vm_id: $task_id"
                                        fi
                                    fi
                                fi
                            fi
                        fi
                    done <<< "$log_content"
                fi
            fi
        fi

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if [ "$task_status" = "stopped" ] || [ "$task_status" = "ERROR" ] || [ "$task_status" = "interrupted by signal" ] || [ "$task_status" = "job errors" ] || [ "$task_status" = "unexpected status" ] || echo "$task_status" | grep -qi "interrupt\|abort\|cancel\|error\|stop\|fail"; then
            log_debug "=== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –ó–ê–î–ê–ù–ò–Ø ==="
            log_debug "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ $task_id —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '$task_status'"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if task_already_sent "$task_id"; then
                log_debug "–ü–†–û–ü–£–°–ö: –ó–∞–¥–∞–Ω–∏–µ $task_id —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ"
                continue
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
            if ! is_task_recent "$task_endtime" "$task_status"; then
                log_debug "–ü–†–û–ü–£–°–ö: –ó–∞–¥–∞–Ω–∏–µ $task_id –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏"
                continue
            fi

            log_debug "–ü–†–ò–ù–Ø–¢–û –ö –û–ë–†–ê–ë–û–¢–ö–ï: –ó–∞–¥–∞–Ω–∏–µ $task_id –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"

            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—á–∏–Ω—ã
            log_response=$(get_task_log "$task_id")
            log_content=""
            if [ -n "$log_response" ]; then
                log_content=$(echo "$log_response" | jq -r '.data[]?.t // empty' 2>/dev/null)
                log_debug "–ü–æ–ª—É—á–µ–Ω –ª–æ–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è $task_id (${#log_content} —Å–∏–º–≤–æ–ª–æ–≤)"
            else
                log_debug "–ù–ï –£–î–ê–õ–û–°–¨ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è $task_id"
            fi

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "job errors"
            if [ "$task_status" = "job errors" ]; then
                log_debug "=== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–î–ê–ù–ò–Ø –° 'job errors' ==="
                log_message "‚ö° –ù–ê–ß–ê–õ–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è $task_id —Å 'job errors'"

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ VM –∏–∑ –∑–∞–¥–∞–Ω–∏—è
                local vm_list=$(get_vms_from_backup_job "$task_id" "$task_node")
                if [ -z "$vm_list" ]; then
                    log_debug "–ü–µ—Ä–≤–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback"
                    vm_list=$(extract_vm_ids_from_log "$log_content")
                fi

                log_debug "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø VM ==="
                log_debug "VM –≤ –∑–∞–¥–∞–Ω–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏: '$vm_list'"
                log_message "üìã VM –≤ –∑–∞–¥–∞–Ω–∏–∏: '$vm_list'"

                if [ -n "$vm_list" ]; then
                    log_message "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π VM..."
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π VM —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
                    local errors_sent=0
                    for vm_id in $vm_list; do
                        local vm_status=$(get_vm_backup_status "$log_content" "$vm_id")
                        log_debug "=== –ê–ù–ê–õ–ò–ó VM $vm_id ==="
                        log_debug "VM $vm_id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: '$vm_status'"
                        log_message "üñ•Ô∏è VM $vm_id: —Å—Ç–∞—Ç—É—Å = $vm_status"

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ —É—Å–ø–µ—à–Ω—ã—Ö VM
                        if [ "$vm_status" = "ERROR" ] || [ "$vm_status" = "STARTED_BUT_FAILED" ] || [ "$vm_status" = "FAILED_TO_START" ] || [ "$vm_status" = "INTERRUPTED" ]; then
                            error_id="${task_id}_${vm_id}"
                            log_debug "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—à–∏–±–∫–∏ –¥–ª—è $error_id"
                            if ! error_already_sent "$error_id"; then
                                error_msg=$(extract_error_from_log "$log_content" "$vm_id")
                                log_debug "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è VM $vm_id: '$error_msg'"
                                log_message "üö® –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫—É –¥–ª—è VM $vm_id: $error_msg"
                                error_message=$(create_error_message "$task_id" "$vm_id" "$task_node" "$error_msg" "$start_time")

                                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                if send_telegram_message "$error_message"; then
                                    mark_error_as_sent "$error_id"
                                    errors_sent=$((errors_sent + 1))
                                    log_message "‚úÖ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è VM $vm_id"
                                else
                                    log_message "‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è VM $vm_id"
                                fi
                            else
                                log_debug "–û—à–∏–±–∫–∞ –¥–ª—è VM $vm_id —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ"
                                log_message "‚ÑπÔ∏è –û—à–∏–±–∫–∞ –¥–ª—è VM $vm_id —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
                            fi
                        else
                            log_debug "VM $vm_id –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å $vm_status - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—à–∏–±–∫–∏"
                            log_message "‚ÑπÔ∏è VM $vm_id –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ (—Å—Ç–∞—Ç—É—Å: $vm_status)"
                        fi
                    done

                    log_message "üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: $errors_sent"

                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                    if [ "$errors_sent" -gt 0 ]; then
                        log_debug "–ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
                        sleep 3
                    fi

                    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
                    log_message "üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏"
                    summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                    if send_telegram_message "$summary_message"; then
                        log_message "‚úÖ –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏: $task_id"
                    else
                        log_message "‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
                    fi

                    mark_task_as_sent "$task_id"
                    log_message "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è $task_id —Å 'job errors'"
                    log_debug "=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò 'job errors' ==="
                else
                    log_debug "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å VM ID –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏: $task_id"
                    log_message "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å VM ID –∏–∑ –∑–∞–¥–∞–Ω–∏—è $task_id"
                    # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
                    summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                    send_telegram_message "$summary_message"
                    mark_task_as_sent "$task_id"
                fi
                continue  # –í–ê–ñ–ù–û: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
            fi

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            if is_user_interrupted "$task_status" "$log_content"; then
                log_debug "–ó–∞–¥–∞–Ω–∏–µ $task_id –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                log_message "üõë –ó–∞–¥–∞–Ω–∏–µ $task_id –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                stopped_message=$(create_stopped_message "$task_id" "$task_node" "$start_time" "$log_content")
                if send_telegram_message "$stopped_message"; then
                    log_message "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: $task_id"
                else
                    log_message "‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: $task_id"
                fi

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ü–û–°–õ–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                sleep 2
                summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                if send_telegram_message "$summary_message"; then
                    log_message "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: $task_id"
                fi

                mark_task_as_sent "$task_id"
            elif is_task_with_errors "$task_status" "$log_content"; then
                log_debug "–ó–∞–¥–∞–Ω–∏–µ $task_id –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏"
                log_message "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ $task_id –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è VM —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
                vm_list=$(extract_vm_ids_from_log "$log_content")
                if [ -z "$vm_list" ]; then
                    vm_list=$(get_vms_from_backup_job "$task_id" "$task_node")
                fi

                if [ -n "$vm_list" ]; then
                    for vm_id in $vm_list; do
                        local vm_status=$(get_vm_backup_status "$log_content" "$vm_id")
                        log_debug "VM $vm_id —Å—Ç–∞—Ç—É—Å –≤ –æ—à–∏–±–æ—á–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏: $vm_status"

                        if [ "$vm_status" = "ERROR" ] || [ "$vm_status" = "STARTED_BUT_FAILED" ]; then
                            error_id="${task_id}_${vm_id}"
                            if ! error_already_sent "$error_id"; then
                                error_msg=$(extract_error_from_log "$log_content" "$vm_id")
                                error_message=$(create_error_message "$task_id" "$vm_id" "$task_node" "$error_msg" "$start_time")
                                if send_telegram_message "$error_message"; then
                                    mark_error_as_sent "$error_id"
                                    log_message "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è VM $vm_id: $task_id"
                                fi
                            fi
                        fi
                    done

                    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    sleep 2
                    summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                    if send_telegram_message "$summary_message"; then
                        log_message "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: $task_id"
                    fi

                    mark_task_as_sent "$task_id"
                else
                    log_debug "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å VM ID –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π: $task_id"
                    mark_task_as_sent "$task_id"
                fi
            else
                log_debug "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è $task_id —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '$task_status'"
                log_message "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è $task_id —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '$task_status'"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                send_telegram_message "$summary_message"
                mark_task_as_sent "$task_id"
            fi
        fi

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if [ "$task_status" = "OK" ]; then

            # –¢–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏
            if ! is_task_recent "$task_endtime" "$task_status"; then
                log_debug "–ü–†–û–ü–£–°–ö: –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ $task_id –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏"
                continue
            fi

            if ! task_already_sent "$task_id"; then
                log_message "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è $task_id"
                summary_message=$(create_backup_summary "$task_id" "$task_status" "$start_time" "$end_time" "$task_node")
                if send_telegram_message "$summary_message"; then
                    mark_task_as_sent "$task_id"
                    log_message "‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: $task_id"
                fi
            fi
        fi
    done < "$temp_tasks_file"

    rm -f "$temp_tasks_file"
    sleep $CHECK_INTERVAL
done
